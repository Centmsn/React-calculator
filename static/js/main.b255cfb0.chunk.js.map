{"version":3,"sources":["components/logic.js","components/Result.js","components/Button.js","components/Keypad.js","components/Calculator.js","index.js"],"names":["CalcLogic","this","_result","forbiddenCombination","numbers","signs","screenValue","screenHistory","length","historyResult","eval","slice","setResult","option","value","Infinity","toString","Error","arguments","trimmedValue","endsWith","resetFlag","lastSign","indexOf","match","Logic","Result","className","getResult","Button","keyValue","classValue","name","click","onClick","disabled","Keypad","handleButtonClick","displayButtons","class","map","button","key","Calculator","useState","setScreenValue","setScreenHistory","resetScreen","setResetScreen","resetHistory","setResetHistory","e","target","textContent","toLowerCase","validateSign","countResult","prevState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b255cfb0.chunk.js","sourcesContent":["class CalcLogic {\r\n  constructor() {\r\n    this._result = \"\";\r\n    this.forbiddenCombination = /^0{1,}/;\r\n    this.numbers = /\\d/;\r\n    this.signs = /[+\\-*/=]/;\r\n  }\r\n  countResult(screenValue, screenHistory) {\r\n    if (screenHistory.length > 0 && this._result.length === 0) {\r\n      const historyResult = eval(`${screenHistory.slice(0, -1)}`);\r\n\r\n      this.setResult(\r\n        \"set\",\r\n        eval(`${historyResult}${screenHistory.slice(-1)}${screenValue}`)\r\n      );\r\n      return this._result;\r\n    } else if (this._result.length > 0) {\r\n      this.setResult(\r\n        \"set\",\r\n        eval(`${this._result}${screenHistory.slice(-1)}${screenValue}`)\r\n      );\r\n      return this._result;\r\n    } else {\r\n      this.setResult(\"set\", eval(`${screenHistory}${screenValue}`));\r\n      return this._result;\r\n    }\r\n  }\r\n\r\n  getResult() {\r\n    return this._result;\r\n  }\r\n\r\n  setResult(option, value = \"\") {\r\n    if (value === Infinity) {\r\n      this._result = \"Do not divide by 0\";\r\n      return;\r\n    }\r\n    if (value.toString() === \"NaN\") {\r\n      this._result = \"Unknown result\";\r\n      return;\r\n    }\r\n    if (option === \"reset\") {\r\n      this._result = \"\";\r\n    } else if (option === \"set\") {\r\n      this._result = value.toString();\r\n    } else {\r\n      throw new Error(\"incorrect option - use set or reset\");\r\n    }\r\n  }\r\n\r\n  setScreenHistory(value, screenHistory, screenValue) {\r\n    if (arguments.length === 3) {\r\n      let trimmedValue = \"\";\r\n      screenValue.endsWith(\".\")\r\n        ? (trimmedValue = screenValue.slice(0, -1))\r\n        : (trimmedValue = screenValue);\r\n      return `${screenHistory}${trimmedValue}${value}`;\r\n    } else if (arguments.length === 2) {\r\n      return `${screenHistory.slice(0, -1)}${value}`;\r\n    } else {\r\n      throw new Error(\"incorrect number of arguments - use 2 or 3\");\r\n    }\r\n  }\r\n\r\n  setScreenValue(value, screenValue) {\r\n    return `${screenValue}${value}`;\r\n  }\r\n\r\n  validateSign(value, screenValue, screenHistory, resetFlag = false) {\r\n    let lastSign = \"\";\r\n\r\n    // check if history exists\r\n    if (screenHistory.length > 0) {\r\n      lastSign = screenHistory[screenHistory.length - 1];\r\n    }\r\n    // dot validation\r\n    if (\r\n      value === \".\" &&\r\n      screenValue.indexOf(\".\") < 0 &&\r\n      screenValue.length > 0\r\n    ) {\r\n      if (resetFlag) return;\r\n      return \"addNum\";\r\n    }\r\n\r\n    // if value is a sign\r\n    if (value.match(this.signs)) {\r\n      if (value === \"=\" && lastSign === \"=\") {\r\n        return \"notAdd\";\r\n      }\r\n\r\n      if (lastSign.match(this.signs) && screenValue.length === 0)\r\n        return \"replaceSign\";\r\n      if (screenValue.length === 0) return \"notAdd\";\r\n      if (lastSign === \"=\" && value !== \"=\") return \"replaceSign\";\r\n      if (lastSign === \"=\") return \"reset\";\r\n\r\n      return \"addSign\";\r\n    }\r\n\r\n    // if value is a num\r\n    if (value.match(this.numbers)) {\r\n      if (screenValue.length > 14 && resetFlag === false) return;\r\n      if (\r\n        screenValue.match(this.forbiddenCombination) &&\r\n        value === \"0\" &&\r\n        screenValue.length <= 1\r\n      )\r\n        return;\r\n\r\n      if (screenValue.length === 1 && screenValue === \"0\" && value !== 0) {\r\n        return \"replace\";\r\n      }\r\n      return \"addNum\";\r\n    }\r\n  }\r\n}\r\n\r\nconst Logic = new CalcLogic();\r\n\r\nexport default Logic;\r\n","import React from \"react\";\r\nimport Logic from \"./logic\";\r\n\r\nconst Result = ({ screenValue, screenHistory }) => {\r\n  return (\r\n    <>\r\n      <div\r\n        className={\r\n          Logic.getResult() === \"Do not divide by 0\" ||\r\n          Logic.getResult() === \"Unknown result\"\r\n            ? \"calculator__screen calculator__screen--disabled\"\r\n            : \"calculator__screen\"\r\n        }\r\n      >\r\n        <div className=\"calculator__screen-history\">{screenHistory}</div>\r\n        {screenValue}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Result;\r\n","import React from \"react\";\r\nimport Logic from \"./logic\";\r\n\r\nconst Button = ({ keyValue, classValue, name, click }) => {\r\n  return (\r\n    <button\r\n      className={\r\n        //   add modifier to class list\r\n        classValue ? `calculator__button ${classValue}` : \"calculator__button\"\r\n      }\r\n      onClick={click}\r\n      disabled={\r\n        (Logic.getResult() === \"Do not divide by 0\" && name === \"actionBtn\") ||\r\n        (Logic.getResult() === \"Unknown result\" && name === \"actionBtn\")\r\n          ? true\r\n          : false\r\n      }\r\n    >\r\n      {keyValue}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport Button from \"./Button\";\r\n\r\nconst Keypad = ({ handleButtonClick, disabled }) => {\r\n  const buttons = [\r\n    { value: \"+\", class: \"calculator__button--sign\", name: \"actionBtn\" },\r\n    { value: \"-\", class: \"calculator__button--sign\", name: \"actionBtn\" },\r\n    { value: \"*\", class: \"calculator__button--sign\", name: \"actionBtn\" },\r\n    { value: \"/\", class: \"calculator__button--sign\", name: \"actionBtn\" },\r\n    { value: \"1\" },\r\n    { value: \"2\" },\r\n    { value: \"3\" },\r\n    { value: \".\", class: \"calculator__button--sign\", name: \"actionBtn\" },\r\n    { value: \"4\" },\r\n    { value: \"5\" },\r\n    { value: \"6\" },\r\n    { value: \"7\" },\r\n    { value: \"8\" },\r\n    { value: \"9\" },\r\n    {\r\n      value: \"0\",\r\n      class: \"calculator__button--round-left-border\",\r\n    },\r\n    { value: \"=\", class: \"calculator__button--equals\", name: \"actionBtn\" },\r\n    { value: \"C\", class: \"calculator__button--sign\" },\r\n    { value: \"CE\", class: \"calculator__button--sign\", name: \"actionBtn\" },\r\n    {\r\n      value: \"back\",\r\n      class: \"calculator__button--sign calculator__button--round-right-border\",\r\n      name: \"actionBtn\",\r\n    },\r\n  ];\r\n  const displayButtons = buttons.map((button) => (\r\n    <Button\r\n      key={button.value}\r\n      keyValue={button.value}\r\n      classValue={button.class}\r\n      click={handleButtonClick}\r\n      name={button.name}\r\n    />\r\n  ));\r\n  return <div className=\"calculator__keyboard\">{displayButtons}</div>;\r\n};\r\n\r\nexport default Keypad;\r\n","import React, { useState } from \"react\";\r\nimport Result from \"./Result\";\r\nimport Keypad from \"./Keypad\";\r\nimport Logic from \"./logic\";\r\nimport \"../css/calculator.css\";\r\n\r\nconst Calculator = () => {\r\n  const [screenValue, setScreenValue] = useState(\"\");\r\n  const [screenHistory, setScreenHistory] = useState(\"\");\r\n  // flag for replacing screen value instead of adding value\r\n  const [resetScreen, setResetScreen] = useState(false);\r\n  // flag for replacing screen history after using = and then number\r\n  const [resetHistory, setResetHistory] = useState(false);\r\n\r\n  const getKeyValue = (e) => {\r\n    const value = e.target.textContent.toLowerCase();\r\n\r\n    // clear all\r\n    if (value === \"c\") {\r\n      setScreenValue(\"\");\r\n      setScreenHistory(\"\");\r\n      Logic.setResult(\"reset\");\r\n      return;\r\n    }\r\n    // clear last\r\n    else if (value === \"ce\") {\r\n      setScreenValue(\"\");\r\n      return;\r\n    }\r\n\r\n    // clear last sign\r\n    else if (value === \"back\") {\r\n      setScreenValue((prevState) => prevState.slice(0, -1));\r\n      return;\r\n    }\r\n\r\n    // show result\r\n    if (value === \"=\") {\r\n      if (Logic.validateSign(value, screenValue, screenHistory) === \"notAdd\")\r\n        return;\r\n      setScreenValue(Logic.countResult(screenValue, screenHistory));\r\n      setScreenHistory((prevState) =>\r\n        Logic.setScreenHistory(value, prevState, screenValue)\r\n      );\r\n      setResetScreen(true);\r\n      setResetHistory(true);\r\n      return;\r\n    }\r\n\r\n    if (\r\n      Logic.validateSign(value, screenValue, screenHistory, resetScreen) ===\r\n      \"replace\"\r\n    ) {\r\n      setScreenValue(value);\r\n    }\r\n\r\n    if (\r\n      Logic.validateSign(value, screenValue, screenHistory, resetScreen) ===\r\n      \"addNum\"\r\n    ) {\r\n      if (\r\n        Logic.getResult() === \"Do not divide by 0\" ||\r\n        Logic.getResult() === \"Unknown result\"\r\n      ) {\r\n        setResetScreen(true);\r\n        setScreenHistory(\"\");\r\n        Logic.setResult(\"reset\");\r\n      }\r\n\r\n      resetScreen\r\n        ? setScreenValue(value)\r\n        : setScreenValue((prevState) => Logic.setScreenValue(value, prevState));\r\n      resetHistory && setScreenHistory(\"\");\r\n      resetHistory && Logic.setResult(\"reset\");\r\n\r\n      setResetHistory(false);\r\n      setResetScreen(false);\r\n    } else if (\r\n      Logic.validateSign(value, screenValue, screenHistory, resetScreen) ===\r\n      \"addSign\"\r\n    ) {\r\n      // if its sign\r\n      if (resetScreen) return;\r\n      setScreenHistory((prevState) =>\r\n        Logic.setScreenHistory(value, prevState, screenValue)\r\n      );\r\n      setScreenValue(Logic.countResult(screenValue, screenHistory));\r\n      // after setting history screen value will be cleared\r\n      setResetScreen(true);\r\n      // if last sign in history is on operator replace it\r\n    } else if (\r\n      Logic.validateSign(value, screenValue, screenHistory) === \"replaceSign\"\r\n    ) {\r\n      setScreenHistory((prevState) => Logic.setScreenHistory(value, prevState));\r\n\r\n      // do not reset history if = was replaced\r\n      setResetHistory(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"calculator\">\r\n      <Result screenValue={screenValue} screenHistory={screenHistory} />\r\n      <Keypad handleButtonClick={getKeyValue} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Calculator;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Calculator from \"./components/Calculator\";\nimport \"./css/base.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Calculator />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}